/*
 *Common Templates Model
 */

var fs = $.require('fs'),
    Mustache = $.require('mustache');

var paths = require($.paths);
var temps = require(paths.config + '/commonTemplates.json'),
    root = "head";



var mapTempChildren = function(temp, listTempSpe, queriesTemp, mapTemp, cb){
    var children = temp.children;
    var childrenNumber = children.length,
	childrenCpt = 0;  
    if(childrenNumber == 0){
	mapTemp(temp, temp.parent, queriesTemp, cb);
    }
    children.forEach(function(childString){
	computeChildName(childString,listTempSpe,function(childName){
	    temps[childName].parent = temp;
	    mapTempChildren(temps[childName], listTempSpe, queriesTemp, mapTemp, function(){
		childrenCpt ++;
		if(childrenCpt == childrenNumber)
		    mapTemp(temp, temp.parent, queriesTemp, cb);	
	    });
	});
    });
}; 


var computeChildName = function(childString, listTempSpe, cb){
    var childName = new String();
    if(childString[0]== ':'){
	var childIndex = childString.replace(':',''); 
	childName = listTempSpe[childIndex];
	cb(childName);
    }else{
	childName = childString;
	cb(childName);
    }
    
};


var mapTemp = function(temp, parent, queriesTemp, cb){
    var queryNumber = Object.keys(temp.query).length,
	queryCpt = 0;
    //console.log(child);
    for(var queryIndex in temp.query){
	queryCpt ++;
	if(typeof queriesTemp[queryIndex] != "undefined"){
	    //completer les cas !!!!!!!!!!!!!!!!!!!!!
	    switch(typeof temp.query[queryIndex]){
		case "string" :
		temp.query[queryIndex] = queriesTemp[queryIndex];
		break;
		case "object":
		temp.query[queryIndex] = temp.query[queryIndex].concat(queriesTemp[queryIndex]);
		break;
		}
	}

	if(queryCpt == queryNumber){
	    compileMustache(temp, function(output){
		if(typeof parent != "undefined"){
		    parent.query[temp.type] = output;
		    cb();
		}else cb(output); //on est a la racine
	    });
	}
    }

    if( queryNumber == 0){
	compileMustache(temp, function(output){
	    if(typeof parent != "undefined"){
		parent.query[temp.type] = output;
		cb();
	    }else cb(output);
	});
    }
};

var compileMustache = function(temp, cb){
    fs.readFile(paths.html + '/' + temp.file, function (err, tempFile) {
	if (err) throw err;
	var output = Mustache.render(tempFile.toString(),temp.query );
	cb(output);
    });
    
}

exports.constructOutput = function(listTempSpe, queriesTemp, cb){
    
    mapTempChildren(temps[root], listTempSpe,queriesTemp, mapTemp, function(output){
	cb(output);
    });
};
