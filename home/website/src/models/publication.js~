/*
 * Publication's Model 
 */
var MongoSession = require(__dirname +'/mongoSession.js');


module.exports = function Publication(title, bornDate, lastUpdate, content,enName,dbName) {
    
    MongoSession.call(this, enName, dbName);

    this.name = (typeof title !='undefined')? simplify(title) : '';
    this.bornDate =(typeof bornDate !='undefined')? bornDate : new Date();
    this.lastUpdate =(typeof lastUpdate !='undefined')? lastUpdate : new Date();
    this.content = (typeof content !='undefined')?content: {title:title};

    this.addThis = function(cb){ 
	if(this.name && this.name != ""){
	    var pub = this,
	    query = { name: this.name};
	    this.find(query, function(docs){
		if(docs.length == 0){
		    pub.add(pub, function(){
			cb(null,pub);
		    })
		}else
		    cb(new Error("name already exists"));
	    })
	}else
	    cb(new Error("name is not valid"))
    };
    
    //met à jour le contenu de la publication
    this.updateThis = function(cb){
	if(typeof this.content.title != "undefined" && this.content.title != "" && this.content.title != null){
	    var pub = this,
	    query = { _id: this._id},
	    queryTest = { name: simplify(this.content.title)};
	    pub.find(queryTest, function(docs){
		if(docs.length == 0 || String(docs[0]._id) == String(pub._id)){
		    pub.lastUpdate = new Date();
		    pub.update(query, pub, function(result){
			if(result != 0)
			    if(typeof cb != 'undefined') 
				cb(null,pub);
			else
			    if(typeof cb != 'undefined')
				cb(new Error('no result for update'));
		    });
		}else
		    if(typeof cb != 'undefined')
			cb(new Error("ids don't match"));
	    });
	}else 
	    if(typeof cb != "undefined")
		cb(new Error("title don't exists or is empty"));
    };

    this.removeThis = function(){ this.remove({_id :this._id}); };

    this.getByName = function(name,cb){
	var pub = this,
	query = {"name": name};
	this.find(query ,function(docs){
	    if(docs.length == 1){
		pub.name = docs[0].name;
		pub.bornDate = docs[0].bornDate;
		pub.lastUpdate = docs[0].lastUpdate;
		pub.content = docs[0].content;
		pub._id = docs[0]._id;
		
		cb(null,pub);
	    }else
		if(docs.length == 0)
		    cb(new Error('no elt with this name :' + name))
	    else
		cb(new Error('several elts with this name'))
	});
    };

    this.getById = function(id,cb){
	var pub = this,
	query = { _id: id};
	this.find(query ,function(docs){
	    if(docs.length == 1){
		pub.name = docs[0].name;
		pub.bornDate = docs[0].bornDate;
		pub.lastUpdate = docs[0].lastUpdate;
		pub.content = docs[0].content;
		pub._id = docs[0]._id;

		cb(null,pub);
	    }else
		if(docs.length == 0)
		    cb(new Error('no elt with this name'))
	    else
		cb(new Error('several elts with this name'))
	});
    };

    this.checkTitle = function(title, cb){
	if(title && title != ''){
	    var pub = this,
	    query = {name: simplify(title)}
	
	    this.find(query,function(docs){
		if(docs.length == 0){
		    cb()
		}else
		    cb(new Error("title is linked to a already used name"))
	    })
	}else 
	    cb(new Error("title's format is invalid"))
    }

    this.setTitle = function(title, cb){
	if(title && title != ''){
	    var pub = this,
	    query = {name: simplify(title)}
	
	    this.find(query,function(docs){
		if(docs.length == 0){
		    pub.name = simplify(title)
		    pub.content.title = title
		    cb()
		}else
		    cb(new Error("title is linked to a already used name"))
	    })
	}else 
	    cb(new Error("title's format is invalid"))
    }


}//end of model

function simplify(title){
    var simpleName = title.trim();

    simpleName = simpleName.replace(/ /g,'_');
    simpleName = simpleName.replace(/[èéêë]/g,"e");
    simpleName = simpleName.replace(/[àâä]/g,"a");
    simpleName = simpleName.replace(/[ûüù]/g,"u");
    simpleName = simpleName.replace(/ç/g,"c");
    simpleName = simpleName.replace(/[ôö]/g,"o");
    simpleName = simpleName.replace(/[ïî]/g,"i");
    simpleName = simpleName.replace(/['\\$:;,\?\.\!]/g,"");
    return simpleName.toLowerCase();
}
