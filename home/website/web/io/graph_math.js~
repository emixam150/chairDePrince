// Browser of Math

var paths = require($.paths),
MathOb = require(paths.models + '/math.js')

exports.exec = function(socket){

    socket.on('graphMath', function(){
	var MathBrowser = new MathOb(),
	limitSize = 10;
	MathBrowser.findSort(null, { _id: 1 } ,limitSize, function(docs){
	    
	    preConstructGraph(docs, function(graphObject){
		socket.emit('dataGraphMath',graphObject);
	    }); //end of constructGraphObjet
	}); //end of MathOb.findSort
    }); //end of onGraphMath
}

function preConstructGraph(docs,cb){
    var cpt = 0,
    nameFromId ={}

    docs.forEach(function(mathElt){
	nameFromId[mathElt._id] = mathElt.name
	cpt++
	if(docs.length == cpt)
	    constructGraphObject(docs,nameFromId,cb)
    })
    if(docs.length == 0)
	    constructGraphObject(docs,nameFromId,cb)
}

function constructGraphObject(docs,nameFromId, cb){
    var graphObject ={
	nodes: [],
	edges:[]
    },
    cpt= 0,
    mathStyle = new MathOb();
   
    docs.forEach(function(mathElt){
	graphObject.nodes.push({
	    id: mathElt.name,
	    label: mathElt.content.title,
	    x: Math.random(),
	    y: Math.random(),
	    size: mathElt.content.children.length+1,
	    color: mathStyle.translateTypeColor(mathElt.content.type)
	});
	    var subcpt = 0;
	    mathElt.content.children.forEach(function(childId){

		if(nameFromId[childId])
		    graphObject.edges.push({
			id: nameFromId[childId] +'-'+ mathElt.name,
			source : nameFromId[childId],
			target: mathElt.name,
			size: 1,
			color: mathStyle.translateTypeColor(mathElt.content.type)
		    })
		subcpt ++;
		if(mathElt.content.children.length == subcpt)
		    next();
	    }); // end of forEach children
	
	if(mathElt.content.children.length == 0)
	    next()
    }); // end of forEach docs
    
    function next(){
	cpt ++;
	if(cpt == docs.length)
	    cb(graphObject);
    }
    if(docs.length == 0)
	cb(graphObject);
};